import numpy as np Importar módulo numpy como np

np.array(lista) Convierte una lista en un ector numpy de datos

variable_array + [escalar] Suma un escalar a un array completo

np.array(lista, dtype='float') Crea un array de tipo float a partir de una lista

variable_array.astype('int') Convierte un array a tipo entero

variable_array.astype('object') Convierte un array a tipo genérico, se le puede ingresar cualquier tipo de dato

variable_array.tolist() Convierte el array a una lista

variable_array.shape Muestra la cantidad de filas y columnas del array

variable_array.dtype Muestra el tipo de datos del array

variable_array.size Muestra cuántos datos hay en cada dimensión del array

variable_array.ndim Muestra la cantidad de dimensiones del array

variable_array[:numero_filas, :numero_columnas] Extrae las primeras numero_filas filas y numero_columnas columnas

condicion = variable_array > numero Genera un array booleano segun la condición especificada

variable_array[condicion] Genera un array que toma los valores verdaderos de acuerdo a la condición en el array que se está trabajando

variable_array[::-1, ] Invierte toda las posiciones de las filas

variable_array[::-1, ::-1] Invierte todas las posiciones de las filas y de las columnas

np.nan Not a number

np.inf Infinito

np.isnan(variable_array) Genera un array booleano según los elementos sean Not a Number

np.isinf(variable_array) Genera un array booleano según los elementos sean infinitos

variable_array.mean() Obtiene el promedio

variable_array.max() Obtiene máximo del array completo

variable_array.min() Obtiene el mínimo del array completo

np.amin(variable_array, axis = 0) Obtiene el mínimo por columnas

np.amin(variable_array, axis = 1) Obtiene el mínimo por filas

np.cumsum(variable_array) Obtiene la suma acumulada

variable_array_1 = variable_array_2.copy() Copia el array variable_array_2 en variable_array_1, los cambios en variable_array_2 no se reflejan en variable_array_1

variable_array.reshape(numero_filas, numero_columnas) Cambia la forma de variable_array a numero_filas filas y numero_columnas columnas

variable_array_1 = variable_array_2.flatten() Convierte el array en un array unidimensional plano, pero si se edita variable_array_2 se refleja el cambio en variable_array_1

variable_array_1 = variable_array_2.ravel() Convierte el array en un array unidimensional plano, si se edita variable_array_2 NO se refleja el cambio en variable_array_1

np.arange(numero) Secuencia desde cero hasta el número numero

np.arange(numero_inicio,numero_termino) Secuencia desde numero_inicio hasta numero_termino

np.arange(numero_inicio,numero_termino, paso) Secuencia desde numero_inicio hasta numero_termino con un paso entre números consecutivos

np.arange(numero_inicio_mayor,numero_termino_menor, paso_negativo) Secuencia desde numero_inicio_mayor hasta numero_termino_menor con un paso_negativo entre números consecutivos lo hace decreciente

np.linspace(start=numero_inicio, stop=numero_termino, num=numero_elementos, dtype = int) Secuencia de cantidad numero_elementos entre numero_inicio y numero_termino de tipo int

np.set_printoptions(precision=cantidad_numeros_precision) Ajusta la precisión de números decimales a cantidad_numeros_precision dígitos

np.ones([numero_filas, numero_colummnas]) Crea un array de unos con numero_filas cantidad de filas y numero_colummnas cantidad de columnas

np.zeros([numero_filas, numero_colummnas]) Crea un array de ceros con numero_filas cantidad de filas y numero_colummnas cantidad de columnas

np.tile(variable_array, cantidad_repeticiones) Crea un array que se compone de variable_array repetida cantidad_repeticiones veces

np.repeat(variable_array, cantidad_repeticiones) Crea un array que repite cada uno de los elementos de variable_array cantidad_repeticiones veces

np.random.rand(numero_filas, numero_columnas) Crea un array aleatorio de numero_filas filas y numero_columnas columnas

np.random.randn(numero_filas, numero_columnas) Crea un array aleatorio con promedio 0 y varianza 1 de forma numero_filas filas y numero_columnas columnas

np.random.randint(numero_menor, numero_mayor, size=[numero_filas, numero_columnas]) Crea un array aleatorio de numero_filas filas y numero_columnas columnas entre los numeros enteros numero_menor y numero_mayor

np.random.random() Un numero aleatorio entre 0 y 1

np.random.random(size=[numero_filas, numero_columnas[) Array aleatorio entre 0 y 1 de numero_filas filas y numero_columnas columnas

np.random.choice(['a','e','i','o','u'], size = tamaño) Array formado por elecciones de la lista ingresada con tamaño en size

np.random.choice(['a','e','i','o','u'], size = tamaño, p = [0.3, 0.1, 0.1, 04, 0.1]) Tomar opciones con probabilidad predefinida

np.random.RandomState(numero) Crea la variable de estado random

np.random.seed(numero) Configura la variable de estado random seed

uniqs, counts = np.unique(arr_rand, return_counts = True) Obtener ítems únicos y sus conteos

index_gt5 = np.where(array > 5) Entrega todas las posiciones que cumplen con la condición de ser menores que 5 (en este caso como ejemplo)

array.take(index_gt5) Entrega todos los items de array que están en los índices de index_gt5 

np.where(array > 5, 'gt5', 'le5') Se produce un array en base a las condiciones dadas como un if-else para la condición "array > 5"

np.argmax(array) Obtiene la posición del número máximo del array

np.argmin(array) Obtiene la posición del número mínimo del array

np.set_printoptions(suppress = True) Desactiva la notación científica

np.genfromtxt(path, delimiter=',', skip_header=1, filling_values=-999, dtype='float') Importa un archivo de texto rellenando con -999 si no es un valor de tipo float como se especificó

np.genfromtext(path, delimiter = ',', skip_header= 1, dtype = 'object') Importa un archivo de texto que no se restrinje a un tipo de dato especifico

np.genfromtext(path, delimiter = ',', skip_header= 1, dtype = 'None') Importa un archivo de texto que no se restrinje a un tipo de dato especifico

np.savetxt('out.csv', data, delimiter), ",") Guarda datos de array a un archivo de texto segun extension indicada (en este caso un archivo .csv)

np.save('myarray.npy', arr2d) Guardar un único array en archivo tipo .npy

np.savez('array.npz', arr2d_f, arr2d_b) Guardar varios arraays en mismo archivo tipo .npy

np.load('myarray.npy') Cargar archivo tipo .npy a memoria de programa actual

np.load('array.npz') Cargar archivo de varios array guardados de tipo .npy a memoria de programa actual

np.concatenate([a, b], axis = 0) Concatenar en forma vertical (a lo largo de las columnas)

np.vstack([a,b]) Concatenar en forma vertical (a lo largo de las columnas)

np.r_[a,b] Concatenar en forma vertical (a lo largo de las columnas)

np.concatenate([a,b], axis=1) Concatenar de forma horizontal (a lo largo de las filas)

np.hstack([a,b]) Concatenar de forma horizontal (a lo largo de las filas)

np.c_[a,b] Concatenar de forma horizontal (a lo largo de las filas)

np.r_[[1,2,3], 0, 0, [4,5,6]] Estructuras complejas para arrays 1d

np.sort(array, axis=0) Ordena todos los elementos del array, sin importar su distribución de filas y columnas
 
 



















